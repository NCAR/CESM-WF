#! /usr/bin/env python

import cesmEnvLib
import argparse, os, stat, sys
import toolTemplate
import graph
import cylc_template
import getpass

def parseArgs(argv = None):

    desc = "This tool parses the CESM Env to create to Cylc Workflow.  It then creates the Cylc Suite."

    parser = argparse.ArgumentParser(prog='CESM_Cylc_setup',
                                     description=desc)
    parser.add_argument('-c','--cime',default=None, type=str,
                        help='Path to CIME root.', required=True)
    parser.add_argument('-p','--path',default=None, type=str,
                        help='Path to output Cylc Suite.  It will be create if it does not exist.', required=True)
    parser.add_argument('-s','--suite',default=None, type=str,
                        help='Name of the ioutput Cylc Suite.', required=True)
    parser.add_argument('-d','--casedir',default=None, type=str,
                        help='Path to CESM caseroot.', required=True)

    parser.add_argument('-g','--graph',default=None, type=str,
                        help='Name of output graph image.', required=False) 
    parser.add_argument('-e','--email',default=None, type=str,
                        help='Email address to send run updates to', required=False)
    return parser.parse_args(argv)


def create_new_run_script(casedir):
    f_new = open(casedir+'/case.run.cylc','w')
    f_old = open(casedir+'/case.run','r')
    for line in f_old:
        if 'caseroot = parse_command_line' in line:
            f_new.write('    os.system("./xmlchange RUN_WITH_SUBMIT=TRUE")\n')
        f_new.write(line)
        if 'success = case_run(case)' in line:
            f_new.write('    os.system("./xmlchange CONTINUE_RUN=TRUE")\n')
    f_new.close()
    f_old.close()
    st = os.stat(casedir+'/case.run.cylc')
    os.chmod(casedir+'/case.run.cylc', st.st_mode | stat.S_IEXEC)


def create_last_tseries_script(casedir):
    f_new = open(casedir+'/postprocess/timeseriesL','w')
    f_old = open(casedir+'/postprocess/timeseries','r')
    for line in f_old:
        if '--completechunk' in line:
            new_line = line.replace('--completechunk 1', '--completechunk 0')
            f_new.write(new_line+'\n')
        else:
            f_new.write(line)
    f_new.close()
    f_old.close()
    st = os.stat(casedir+'/postprocess/timeseriesL')
    os.chmod(casedir+'/postprocess/timeseriesL', st.st_mode | stat.S_IEXEC)


def main(argv=None):

    args = parseArgs(argv)

    _LIBDIR = os.path.join(args.cime,"scripts", "Tools")
    sys.path.append(_LIBDIR)

    import env_cylc
    env = env_cylc.get_env(args.casedir)

    if args.email != None:
        env['email'] = args.email
    else:
        env['email'] = getpass.getuser()+'@ucar.edu' 

    print 'RESUBMIT: ', env['RESUBMIT']
    print 'RUNDIR: ', env['RUNDIR']
    print 'RUN_STARTDATE: ', env['RUN_STARTDATE']
    print 'STOP_N: ', env['STOP_N']
    print 'STOP_OPTION: ', env['STOP_OPTION']
    print 'DOUT_S: ', env['DOUT_S']
    print 'DOUT_L_MS: ', env['DOUT_L_MS']
    print 'CASEROOT: ', env['CASEROOT']
    print 'GENERATE_TIMESERIES: ', env['GENERATE_TIMESERIES']
    print 'TIMESERIES_TPER: ', env['TIMESERIES_TPER']
    print 'TIMESERIES_N: ', env['TIMESERIES_N']
    print 'TIMESERIES_RESUBMIT: ', env['TIMESERIES_RESUBMIT']
    print 'GENERATE_AVGS_ATM: ', env['GENERATE_AVGS_ATM']
    print 'GENERATE_DIAGS_ATM: ', env['GENERATE_DIAGS_ATM']
    print 'ATMDIAG_test_first_yr: ', env['ATMDIAG_test_first_yr']
    print 'ATMDIAG_test_nyrs: ', env['ATMDIAG_test_nyrs']
    print 'ATMDIAG_TEST_TIMESERIES: ', env['ATMDIAG_TEST_TIMESERIES']
    print 'GENERATE_AVGS_OCN: ', env['GENERATE_AVGS_OCN']
    print 'GENERATE_DIAGS_OCN: ', env['GENERATE_DIAGS_OCN']
    print 'OCNDIAG_YEAR0: ', env['OCNDIAG_YEAR0']
    print 'OCNDIAG_YEAR1: ', env['OCNDIAG_YEAR1']
    print 'OCNDIAG_TSERIES_YEAR0: ', env['OCNDIAG_TSERIES_YEAR0']
    print 'OCNDIAG_TSERIES_YEAR1: ', env['OCNDIAG_TSERIES_YEAR1']
    print 'OCNDIAG_MODELCASE_INPUT_TSERIES: ', env['OCNDIAG_MODELCASE_INPUT_TSERIES']
    print 'GENERATE_AVGS_LND: ', env['GENERATE_AVGS_LND']
    print 'GENERATE_DIAGS_LND: ', env['GENERATE_DIAGS_LND']
    print 'LNDDIAG_clim_first_yr_1: ', env['LNDDIAG_clim_first_yr_1']
    print 'LNDDIAG_clim_num_yrs_1: ', env['LNDDIAG_clim_num_yrs_1']
    print 'LNDDIAG_trends_first_yr_1: ',env['LNDDIAG_trends_first_yr_1']
    print 'LNDDIAG_trends_num_yrs_1: ', env['LNDDIAG_trends_num_yrs_1']
    print 'LNDDIAG_CASE1_TIMESERIES: ', env['LNDDIAG_CASE1_TIMESERIES']
    print 'GENERATE_AVGS_ICE: ', env['GENERATE_AVGS_ICE']
    print 'GENERATE_DIAGS_ICE: ', env['GENERATE_DIAGS_ICE']
    print 'ICEDIAG_BEGYR_DIFF: ', env['ICEDIAG_BEGYR_DIFF']
    print 'ICEDIAG_ENDYR_DIFF: ', env['ICEDIAG_ENDYR_DIFF']
    print 'ICEDIAG_DIFF_TIMESERIES: ', env['ICEDIAG_DIFF_TIMESERIES']
    print 'Directives: ',env['directives']

    keys = ['case_run', 'case_st_archive', 'case_lt_archive', 'timeseries', 'timeseriesL', 'atm_averages', 'atm_diagnostics',
            'ocn_averages', 'ocn_diagnostics', 'lnd_averages', 'lnd_diagnostics', 'ice_averages', 'ice_diagnostics']

    template = {}
    for tool in keys:
        template[tool] = toolTemplate.toolTemplate(tool, env)

    for tool in keys:
        toolTemplate.align_dates(template['case_run'].specs, template[tool].specs, tool)

    g = graph.create_graph(keys,template)

    cylc_template.create_cylc_input(g, env, args.path)

    cylc_template.setup_suite(args.path, args.suite, args.graph)

    create_new_run_script(args.casedir)

    create_last_tseries_script(args.casedir)

if __name__ == '__main__':
    main()
